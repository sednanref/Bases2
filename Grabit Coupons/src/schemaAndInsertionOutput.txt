feb 22, 2015 8:37:44 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager <clinit>
INFO: HCANN000001: Hibernate Commons Annotations {4.0.5.Final}
feb 22, 2015 8:37:44 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate Core {4.3.8.Final}
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Environment <clinit>
INFO: HHH000205: Loaded properties from resource hibernate.properties: {hibernate.connection.driver_class=org.h2.Driver, hibernate.service.allow_crawling=false, hibernate.dialect=org.hibernate.dialect.H2Dialect, hibernate.max_fetch_depth=5, hibernate.format_sql=true, hibernate.generate_statistics=true, hibernate.connection.username=sa, hibernate.connection.url=jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE, hibernate.bytecode.use_reflection_optimizer=false, hibernate.jdbc.batch_versioned_data=true, hibernate.connection.pool_size=5}
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Environment buildBytecodeProvider
INFO: HHH000021: Bytecode provider name : javassist
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration configure
INFO: HHH000043: Configuring from resource: /hibernate.cfg.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration getConfigurationInputStream
INFO: HHH000040: Configuration resource: /hibernate.cfg.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/user.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/sale.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/category.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/coupon.xml
feb 22, 2015 8:37:44 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/credit_card.xml
feb 22, 2015 8:37:45 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/sale_link.xml
feb 22, 2015 8:37:45 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/sale_date.xml
feb 22, 2015 8:37:45 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/sale_picture.xml
feb 22, 2015 8:37:45 PM org.hibernate.cfg.Configuration addResource
INFO: HHH000221: Reading mappings from resource: xml/pay_type.xml
feb 22, 2015 8:37:45 PM org.hibernate.cfg.Configuration doConfigure
INFO: HHH000041: Configured SessionFactory: null
feb 22, 2015 8:37:45 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH000402: Using Hibernate built-in connection pool (not for production use!)
feb 22, 2015 8:37:45 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/T2]
feb 22, 2015 8:37:45 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH000046: Connection properties: {user=lfernandes, password=****}
feb 22, 2015 8:37:45 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH000006: Autocommit mode: false
feb 22, 2015 8:37:45 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
INFO: HHH000115: Hibernate connection pool size: 1 (min=1)
feb 22, 2015 8:37:45 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
feb 22, 2015 8:37:45 PM org.hibernate.engine.transaction.internal.TransactionFactoryInitiator initiateService
INFO: HHH000399: Using default transaction strategy (direct JDBC transactions)
feb 22, 2015 8:37:45 PM org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory <init>
INFO: HHH000397: Using ASTQueryTranslatorFactory
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.SaleLink (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.PayType (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.Category (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.Company (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.SalePicture (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.SaleDate (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.Sale (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.User (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.Coupon (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.CreditCard (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tuple.PojoInstantiator <init>
INFO: HHH000182: No default (no-argument) constructor for class: classes.Customer (class must be instantiated by Interceptor)
feb 22, 2015 8:37:46 PM org.hibernate.tool.hbm2ddl.SchemaExport execute
INFO: HHH000227: Running hbm2ddl schema export
Hibernate: 
    alter table CATEGORY 
        drop 
        foreign key FK_gcdgvxaib90wib5u2cx30h18
Hibernate: 
    alter table COMPANY 
        drop 
        foreign key FK_ddv5rt3rp8uvk1uxgx1pp6ax3
Hibernate: 
    alter table COUPON 
        drop 
        foreign key FK_iyuorgto0r24x3qjp1ekb40qi
Hibernate: 
    alter table COUPON 
        drop 
        foreign key FK_c5xvy6r6t7yah5ji9bun8oguq
Hibernate: 
    alter table COUPON 
        drop 
        foreign key FK_3y2dbrp9ovtyp3cet9ut9hdvw
Hibernate: 
    alter table CREDIT_CARD 
        drop 
        foreign key FK_h5rntw8g642yellb1r0io3ia0
Hibernate: 
    alter table CUSTOMER 
        drop 
        foreign key FK_mk3cgvpjoy0vr5tbjwp5g13i1
Hibernate: 
    alter table FRIENDS 
        drop 
        foreign key FK_gixl9ycgvf1dswyqy7995bde0
Hibernate: 
    alter table FRIENDS 
        drop 
        foreign key FK_n1eh98d1dp4lstf08h91u9sa5
Hibernate: 
    alter table LINK 
        drop 
        foreign key FK_9lp4a8fpl09ta7e8cyi5e8lgc
Hibernate: 
    alter table Picture 
        drop 
        foreign key FK_qm3jo9edotak5k8exkqhemdve
Hibernate: 
    alter table SALE 
        drop 
        foreign key FK_tbnm901h1c5rkj8rbo7vgk3h1
Hibernate: 
    alter table SALE 
        drop 
        foreign key FK_8wg0qbw0p6qe7c9ou76bwo178
Hibernate: 
    alter table SALES_DATES 
        drop 
        foreign key FK_nhtarouk3uh14dgjikcdcixcj
Hibernate: 
    alter table SALES_DATES 
        drop 
        foreign key FK_oh4d2blbqitfasssshabrpma7
Hibernate: 
    drop table if exists CATEGORY
Hibernate: 
    drop table if exists COMPANY
Hibernate: 
    drop table if exists COUPON
Hibernate: 
    drop table if exists CREDIT_CARD
Hibernate: 
    drop table if exists CUSTOMER
Hibernate: 
    drop table if exists DATE
Hibernate: 
    drop table if exists FRIENDS
Hibernate: 
    drop table if exists LINK
Hibernate: 
    drop table if exists PAY_TYPE
Hibernate: 
    drop table if exists Picture
Hibernate: 
    drop table if exists SALE
Hibernate: 
    drop table if exists SALES_DATES
Hibernate: 
    drop table if exists USER
Hibernate: 
    create table CATEGORY (
        CATEGORY_ID integer not null auto_increment,
        NAME varchar(255),
        SUPERCATEGORY_ID integer,
        primary key (CATEGORY_ID)
    )
Hibernate: 
    create table COMPANY (
        COMPANY_EMAIL varchar(255) not null,
        RIF varchar(255),
        NAME varchar(255),
        ADDRESS varchar(255),
        TELEPHONE_NUMBER varchar(255),
        CUSTOMERS_NUMBER integer,
        primary key (COMPANY_EMAIL)
    )
Hibernate: 
    create table COUPON (
        COUPON_ID integer not null auto_increment,
        OWNER varchar(255),
        PAY_DATE date,
        RECEIPT_DATE date,
        USE_DATE date,
        QUANTITY integer,
        PAY_TYPE integer not null,
        CREDIT_CARD varchar(255),
        BUYER varchar(255) not null,
        SALE integer not null,
        primary key (COUPON_ID)
    )
Hibernate: 
    create table CREDIT_CARD (
        NUMBER varchar(255) not null,
        EMAIL varchar(255),
        primary key (NUMBER)
    )
Hibernate: 
    create table CUSTOMER (
        EMAIL varchar(255) not null,
        LAST_NAME varchar(255),
        VIRTUAL_MONEY integer,
        EMAIL_FREQUENCY integer,
        primary key (EMAIL)
    )
Hibernate: 
    create table DATE (
        DATE date not null,
        primary key (DATE)
    )
Hibernate: 
    create table FRIENDS (
        PERSON_EMAIL varchar(255) not null,
        FRIEND_EMAIL varchar(255) not null,
        primary key (FRIEND_EMAIL, PERSON_EMAIL)
    )
Hibernate: 
    create table LINK (
        URL varchar(255) not null,
        SALE_ID integer,
        primary key (URL)
    )
Hibernate: 
    create table PAY_TYPE (
        PAY_TYPE_ID integer not null auto_increment,
        TYPE varchar(255),
        primary key (PAY_TYPE_ID)
    )
Hibernate: 
    create table Picture (
        PATH varchar(255) not null,
        SALE_ID integer,
        primary key (PATH)
    )
Hibernate: 
    create table SALE (
        SALE_ID integer not null auto_increment,
        NAME varchar(255),
        ORIGINAL_PRICE double precision,
        OFFERED_PRICE double precision,
        EXPEDITION_DATE date,
        EXPIRATION_DATE date,
        DESCRIPTION varchar(255),
        COMPANY_EMAIL varchar(255),
        CATEGORY_ID integer,
        primary key (SALE_ID)
    )
Hibernate: 
    create table SALES_DATES (
        SALE_ID integer not null,
        DATE date not null,
        primary key (SALE_ID, DATE)
    )
Hibernate: 
    create table USER (
        EMAIL varchar(255) not null,
        PASSWORD varchar(255),
        NAME varchar(255),
        primary key (EMAIL)
    )
Hibernate: 
    alter table CATEGORY 
        add constraint FK_gcdgvxaib90wib5u2cx30h18 
        foreign key (SUPERCATEGORY_ID) 
        references CATEGORY (CATEGORY_ID)
Hibernate: 
    alter table COMPANY 
        add constraint FK_ddv5rt3rp8uvk1uxgx1pp6ax3 
        foreign key (COMPANY_EMAIL) 
        references USER (EMAIL)
Hibernate: 
    alter table COUPON 
        add constraint FK_iyuorgto0r24x3qjp1ekb40qi 
        foreign key (PAY_TYPE) 
        references PAY_TYPE (PAY_TYPE_ID)
Hibernate: 
    alter table COUPON 
        add constraint FK_c5xvy6r6t7yah5ji9bun8oguq 
        foreign key (BUYER) 
        references CUSTOMER (EMAIL)
Hibernate: 
    alter table COUPON 
        add constraint FK_3y2dbrp9ovtyp3cet9ut9hdvw 
        foreign key (SALE) 
        references SALE (SALE_ID)
Hibernate: 
    alter table CREDIT_CARD 
        add constraint FK_h5rntw8g642yellb1r0io3ia0 
        foreign key (EMAIL) 
        references CUSTOMER (EMAIL)
Hibernate: 
    alter table CUSTOMER 
        add constraint FK_mk3cgvpjoy0vr5tbjwp5g13i1 
        foreign key (EMAIL) 
        references USER (EMAIL)
Hibernate: 
    alter table FRIENDS 
        add constraint FK_gixl9ycgvf1dswyqy7995bde0 
        foreign key (FRIEND_EMAIL) 
        references CUSTOMER (EMAIL)
Hibernate: 
    alter table FRIENDS 
        add constraint FK_n1eh98d1dp4lstf08h91u9sa5 
        foreign key (PERSON_EMAIL) 
        references CUSTOMER (EMAIL)
Hibernate: 
    alter table LINK 
        add constraint FK_9lp4a8fpl09ta7e8cyi5e8lgc 
        foreign key (SALE_ID) 
        references SALE (SALE_ID)
Hibernate: 
    alter table Picture 
        add constraint FK_qm3jo9edotak5k8exkqhemdve 
        foreign key (SALE_ID) 
        references SALE (SALE_ID)
Hibernate: 
    alter table SALE 
        add constraint FK_tbnm901h1c5rkj8rbo7vgk3h1 
        foreign key (COMPANY_EMAIL) 
        references COMPANY (COMPANY_EMAIL)
Hibernate: 
    alter table SALE 
        add constraint FK_8wg0qbw0p6qe7c9ou76bwo178 
        foreign key (CATEGORY_ID) 
        references CATEGORY (CATEGORY_ID)
Hibernate: 
    alter table SALES_DATES 
        add constraint FK_nhtarouk3uh14dgjikcdcixcj 
        foreign key (DATE) 
        references DATE (DATE)
Hibernate: 
    alter table SALES_DATES 
        add constraint FK_oh4d2blbqitfasssshabrpma7 
        foreign key (SALE_ID) 
        references SALE (SALE_ID)
feb 22, 2015 8:37:54 PM org.hibernate.tool.hbm2ddl.SchemaExport execute
INFO: HHH000230: Schema export complete
Hibernate: 
    insert 
    into
        PAY_TYPE
        (TYPE) 
    values
        (?)
Hibernate: 
    insert 
    into
        PAY_TYPE
        (TYPE) 
    values
        (?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CATEGORY
        (NAME, SUPERCATEGORY_ID) 
    values
        (?, ?)
Hibernate: 
    select
        customer_.EMAIL,
        customer_1_.PASSWORD as PASSWORD2_12_,
        customer_1_.NAME as NAME3_12_,
        customer_.LAST_NAME as LAST_NAM2_4_,
        customer_.VIRTUAL_MONEY as VIRTUAL_3_4_,
        customer_.EMAIL_FREQUENCY as EMAIL_FR4_4_ 
    from
        CUSTOMER customer_ 
    inner join
        USER customer_1_ 
            on customer_.EMAIL=customer_1_.EMAIL 
    where
        customer_.EMAIL=?
Hibernate: 
    select
        customer_.EMAIL,
        customer_1_.PASSWORD as PASSWORD2_12_,
        customer_1_.NAME as NAME3_12_,
        customer_.LAST_NAME as LAST_NAM2_4_,
        customer_.VIRTUAL_MONEY as VIRTUAL_3_4_,
        customer_.EMAIL_FREQUENCY as EMAIL_FR4_4_ 
    from
        CUSTOMER customer_ 
    inner join
        USER customer_1_ 
            on customer_.EMAIL=customer_1_.EMAIL 
    where
        customer_.EMAIL=?
Hibernate: 
    select
        customer_.EMAIL,
        customer_1_.PASSWORD as PASSWORD2_12_,
        customer_1_.NAME as NAME3_12_,
        customer_.LAST_NAME as LAST_NAM2_4_,
        customer_.VIRTUAL_MONEY as VIRTUAL_3_4_,
        customer_.EMAIL_FREQUENCY as EMAIL_FR4_4_ 
    from
        CUSTOMER customer_ 
    inner join
        USER customer_1_ 
            on customer_.EMAIL=customer_1_.EMAIL 
    where
        customer_.EMAIL=?
Hibernate: 
    select
        customer_.EMAIL,
        customer_1_.PASSWORD as PASSWORD2_12_,
        customer_1_.NAME as NAME3_12_,
        customer_.LAST_NAME as LAST_NAM2_4_,
        customer_.VIRTUAL_MONEY as VIRTUAL_3_4_,
        customer_.EMAIL_FREQUENCY as EMAIL_FR4_4_ 
    from
        CUSTOMER customer_ 
    inner join
        USER customer_1_ 
            on customer_.EMAIL=customer_1_.EMAIL 
    where
        customer_.EMAIL=?
Hibernate: 
    insert 
    into
        CREDIT_CARD
        (EMAIL, NUMBER) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CREDIT_CARD
        (EMAIL, NUMBER) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CREDIT_CARD
        (EMAIL, NUMBER) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CREDIT_CARD
        (EMAIL, NUMBER) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        CREDIT_CARD
        (EMAIL, NUMBER) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        LINK
        (SALE_ID, URL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        LINK
        (SALE_ID, URL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        LINK
        (SALE_ID, URL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        LINK
        (SALE_ID, URL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        LINK
        (SALE_ID, URL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        CUSTOMER
        (LAST_NAME, VIRTUAL_MONEY, EMAIL_FREQUENCY, EMAIL) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        CUSTOMER
        (LAST_NAME, VIRTUAL_MONEY, EMAIL_FREQUENCY, EMAIL) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        CUSTOMER
        (LAST_NAME, VIRTUAL_MONEY, EMAIL_FREQUENCY, EMAIL) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        CUSTOMER
        (LAST_NAME, VIRTUAL_MONEY, EMAIL_FREQUENCY, EMAIL) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        CUSTOMER
        (LAST_NAME, VIRTUAL_MONEY, EMAIL_FREQUENCY, EMAIL) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        COMPANY
        (RIF, NAME, ADDRESS, TELEPHONE_NUMBER, CUSTOMERS_NUMBER, COMPANY_EMAIL) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        COMPANY
        (RIF, NAME, ADDRESS, TELEPHONE_NUMBER, CUSTOMERS_NUMBER, COMPANY_EMAIL) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        USER
        (PASSWORD, NAME, EMAIL) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        COMPANY
        (RIF, NAME, ADDRESS, TELEPHONE_NUMBER, CUSTOMERS_NUMBER, COMPANY_EMAIL) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        SALE
        (NAME, ORIGINAL_PRICE, OFFERED_PRICE, EXPEDITION_DATE, EXPIRATION_DATE, DESCRIPTION, COMPANY_EMAIL, CATEGORY_ID) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        SALE
        (NAME, ORIGINAL_PRICE, OFFERED_PRICE, EXPEDITION_DATE, EXPIRATION_DATE, DESCRIPTION, COMPANY_EMAIL, CATEGORY_ID) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        SALE
        (NAME, ORIGINAL_PRICE, OFFERED_PRICE, EXPEDITION_DATE, EXPIRATION_DATE, DESCRIPTION, COMPANY_EMAIL, CATEGORY_ID) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        SALE
        (NAME, ORIGINAL_PRICE, OFFERED_PRICE, EXPEDITION_DATE, EXPIRATION_DATE, DESCRIPTION, COMPANY_EMAIL, CATEGORY_ID) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        COUPON
        (OWNER, PAY_DATE, RECEIPT_DATE, USE_DATE, QUANTITY, PAY_TYPE, CREDIT_CARD, BUYER, SALE) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        COUPON
        (OWNER, PAY_DATE, RECEIPT_DATE, USE_DATE, QUANTITY, PAY_TYPE, CREDIT_CARD, BUYER, SALE) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        COUPON
        (OWNER, PAY_DATE, RECEIPT_DATE, USE_DATE, QUANTITY, PAY_TYPE, CREDIT_CARD, BUYER, SALE) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        COUPON
        (OWNER, PAY_DATE, RECEIPT_DATE, USE_DATE, QUANTITY, PAY_TYPE, CREDIT_CARD, BUYER, SALE) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        DATE
        (DATE) 
    values
        (?)
Hibernate: 
    insert 
    into
        DATE
        (DATE) 
    values
        (?)
Hibernate: 
    insert 
    into
        Picture
        (SALE_ID, PATH) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        Picture
        (SALE_ID, PATH) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        Picture
        (SALE_ID, PATH) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        Picture
        (SALE_ID, PATH) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        Picture
        (SALE_ID, PATH) 
    values
        (?, ?)
Hibernate: 
    update
        CATEGORY 
    set
        NAME=?,
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CATEGORY 
    set
        NAME=?,
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CATEGORY 
    set
        NAME=?,
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CATEGORY 
    set
        NAME=?,
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        LINK 
    set
        SALE_ID=? 
    where
        URL=?
Hibernate: 
    update
        LINK 
    set
        SALE_ID=? 
    where
        URL=?
Hibernate: 
    update
        LINK 
    set
        SALE_ID=? 
    where
        URL=?
Hibernate: 
    update
        LINK 
    set
        SALE_ID=? 
    where
        URL=?
Hibernate: 
    update
        LINK 
    set
        SALE_ID=? 
    where
        URL=?
Hibernate: 
    update
        CATEGORY 
    set
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CATEGORY 
    set
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CATEGORY 
    set
        SUPERCATEGORY_ID=? 
    where
        CATEGORY_ID=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
Hibernate: 
    insert 
    into
        FRIENDS
        (FRIEND_EMAIL, PERSON_EMAIL) 
    values
        (?, ?)
Hibernate: 
    update
        CREDIT_CARD 
    set
        EMAIL=? 
    where
        NUMBER=?
feb 22, 2015 8:37:54 PM org.hibernate.engine.internal.StatisticalLoggingSessionEventListener end
INFO: Session Metrics {
    18648 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    43879114 nanoseconds spent preparing 81 JDBC statements;
    39556081 nanoseconds spent executing 81 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    70507849 nanoseconds spent executing 1 flushes (flushing a total of 41 entities and 55 collections);
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
feb 22, 2015 8:37:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl stop
INFO: HHH000030: Cleaning up connection pool [jdbc:mysql://localhost:3306/T2]
